Souběžnost (konkurence)
Go poskytuje konstrukce souběžnosti jako základní součást jazyka. Tyto lekce je ukazují a přinášejí nějaké příklady jejího použití.

Autoři Go
https://golang.org

* Gorutiny (Goroutines)

_Gorutina_ je odlehčené vlákno (thread) spravované běhovým prostředím Go.

	go f(x, y, z)

spouští novou gorutinu se zavoláním

	f(x, y, z)

Vyhodnocení `f`, `x`, `y`, a `z` se stane v aktuální gorutině a provedení `f` se bude dít v nové gorutině.

Gorutiny běží ve stejném adresovém prostoru, takže přístup ke sdílené paměti musí být synchronizovaný. Balíček [[https://golang.org/pkg/sync/][`sync`]] poskytuje užitečné základní prvky, ale v Go je nebudeš tak moc potřebovat, protože jsou tu jiné možnosti. (Viz další slide.)

.play concurrency/goroutines.go

* Kanály (Channels)

Kanály jsou typové potrubí, skrze které můžeš posílat a přijímat hodnoty pomocí kanálového operátoru `<-`.

	ch <- v    // Pošli v do kanálu ch.
	v := <-ch  // Přijmi hodnotu z ch a
	           // přiřaď ji do v.

(Data tečou ve směru šipky.)

Jako u map a řezů, i kanály musí být před použitím vytvořené:

	ch := make(chan int)

U běžných kanálů, posílání a přijímání blokuje dokud není druhá strana připravená. To umožňuje gorutinám se synchronizovat bez explicitních zámků nebo dalších řídících proměnných.

Tento příklad sčítá čísla v řezu, a distribuuje práci mezi dvě gorutiny.
Když obě rutiny skončí své výpočty, vypočítá finální výsledek.

.play concurrency/channels.go

* Kanály s vyrovnávací pamětí (Buffered Channels)

Kanály mohou mít vyrovnávací paměť (_buffer_).  Pro inicializaci kanálu s vyrovnávací pamětí nastav velikost bufferu jako druhý parametr ve funkci `make`:

	ch := make(chan int, 100)

Posílání do kanálu s vyrovnávací pamětí blokuje jenom když je paměť plná. Přijímání blokuje pokud je paměť prázdná.

Modifikuj tento příklad aby způsobil přeplnění vyrovnávací paměti a uvidíš co se stane.

.play concurrency/buffered-channels.go

* Range a Close

Odesílatel může `zavřít` kanál aby naznačil že už nebudou poslané žádné další hodnoty. Příjemci mohou testovat jestli byl kanál už uzavřený přiřazením druhého parametru u přijímaného výrazu:

	v, ok := <-ch

`ok` je `false`, když už nejsou žádné další hodnoty k příjmu a kanál je uzavřený.

Cyklus `for`i`:=`range`c` přijímá opakovaně hodnoty z kanálu, dokud není uzavřený.

*Poznámka:* Kanál by měl uzavírat jenom odesílatel, nikdy ne příjemce. Odeslání do uzavřeného kanálu způsobí paniku.

*Další*poznámka*: Kanály nejsou jako soubory; obvykle je nemusíš zavírat. Zavření je potřeba jenom pokud chceš oznámit příjemci, že už nepřijdou žádné další hodnoty, například kvůli ukončení cyklu `range`.

.play concurrency/range-and-close.go

* Výběr (Select)

Příkaz `select` umožňuje gorutině čekat na víc komunikačních operací.

Příkaz `select` je blokující, dokud není možné spustit jednu z jeho větví case - potom ji provede.  A když jich je dostupných víc, náhodně si vybere jeden z nich.

.play concurrency/select.go

* Defaultní výběr (Default Selection)

Případ `default` se uvnitř `select` spustí pokud není dostupný žádný jiný případ.

Použij případ `default` k vyzkoušení odeslání nebo příjem bez blokování:

	select {
	case i := <-c:
		// i je používané
	default:
		// přijímání z c by blokovalo
	}

.play concurrency/default-selection.go

* Cvičení: Ekvivalentní Binární stromy

Různých binárních stromů se stejnou sekvencí uloženou v listech může být mnoho. Například, tady jsou dva binární stromy obsahující sekvenci 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Ve většině jazyků je funkce pro kontrolu že dva binární stromy tvoří stejnou sekvenci celkem složitá. My použijeme konkurenci a kanály z Go abychom napsali jednoduché řešení.

Tento příklad používá balíček `tree`, který definuje typ:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Popis pokračuje na [[javascript:click('.next-page')][další stránce]].

* Cvičení: Ekvivalentní Binární stromy

*1.* Naimplementuj funkci `Walk`.

*2.* Otestuj funkci `Walk`.

Funkce `tree.New(k)` vytváří náhodně strukturovaný (ale vždy seřazený) binární strom s hodnotami `k`, `2k`, `3k`, ..., `10k`.

Vytvoř nový kanál `ch` a zavolej Walk:

	go Walk(tree.New(1), ch)

Potom načti a vytiskni 10 hodnot z kanálu. Měly by to být čísla 1, 2, 3, ..., 10.

*3.* Naimplementuj funkci `Same` s použitím `Walk` abys zjistil/a jestli `t1` a `t2` obsahují stejné hodnoty.

*4.* Otestuj funkci `Same`.

`Same(tree.New(1),`tree.New(1))` by měla vrátit true, a `Same(tree.New(1),`tree.New(2))` by měla vrátit false.

Dokumentace k `Tree` se dá najít [[https://godoc.org/golang.org/x/tour/tree#Tree][zde]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Viděli jsme, jak jsou kanály skvělé pro komunikaci mezi gorutinami.

Ale co když nepotřebujeme komunikovat? Co když se jenom chceme ujistit, že jen jedna
gorutina bude k přoměnné přistupovat naráz, aby se zabránilo konfliktům?

Tento koncept se jmenuje _vzájemné_vyloučení_ (mutual exclusion), a konvenční název pro datovou strukturu, která to poskytuje je _mutex_.

Standardní knihovna v Go poskytuje vzájemné vyloučení s
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] a jeho dvěma metodami

- `Lock`
- `Unlock`

Můžeme definovat blok kódu, který se provede ve vzájemném vyloučení jeho obalením
voláními `Lock` a `Unlock`, jak je ukázáno v metodě `Inc`.

Také můžeme použít `defer` pro zajištění, že se mutex odemkne, jako v metodě `Value`.

.play concurrency/mutex-counter.go

* Cvičení: Web crawler

V tomto cvičení použijeme vlastnosti Go konkurence pro paralelizaci web crawleru.

Změň funkci `Crawl` aby stahovala URL paralelně bez stahování stejného URL dvakrát.

_Nápověda: můžeš si držet cache URL které jsou prošel/la v mapě, ale mapy samotné nejsou
bezpečné pro konkurenční použití!

.play concurrency/exercise-web-crawler.go

* Kam jít odsud pro více informací o Go...

#appengine: Můžeš začít
#appengine: [[https://golang.org/dl/][instalací Go]].

#appengine: Když budeš mít Go nainstalované
[[https://golang.org/doc/][Dokumentace Go]] je skvělé místo pro
#appengine: pokračování
začátek.
Ta obsahuje reference, tutoriály, videa a další.

Jestli se chceš naučit jak organizovat a pracovat s Go kódem, podívej se na [[https://www.youtube.com/watch?v=XCsL89YtqCs][tento screencast]], nebo si přečti [[https://golang.org/doc/code.html][Jak psát Go kód (en)]].

Pokud potřebuješ pomoc se standardní knihovnou, podívej se na [[https://golang.org/pkg/][referenci balíčku]]. Pro lepší seznámení s jazykem se můžeš podívat na [[https://golang.org/ref/spec][Specifikace jazyka (en)]] a možná budeš překvapený/á že je docela čitelná.

Pro další informace o modelu souběžnosti jazyka Go se podívej na 
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Vzory souběžnosti v Go (en)]]
([[https://talks.golang.org/2012/concurrency.slide][slidy]])
a
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Pokročilé vzory souběžnosti v Go]]
([[https://talks.golang.org/2013/advconc.slide][slidy]])
a přečti si průvodce kódem (codewalk) 
[[https://golang.org/doc/codewalk/sharemem/][Sdílení paměti pomocí komunikace]].

Pro úvod do psaní web aplikací se podívej na
[[https://vimeo.com/53221558][Jednoduché programovací prostředí]]
([[https://talks.golang.org/2012/simple.slide][slidy]])
a přečti si tutoriál
[[https://golang.org/doc/articles/wiki/][Píšeme Web aplikace (en)]].

Průvodce kódem [[https://golang.org/doc/codewalk/functions/][Funkce prvního řádu v Go (en)]] odhaluje zajímavou perspektivu na Go funkční typy.

[[https://blog.golang.org/][Go Blog]] má velký archiv informativních článků o Go.

A navštiv [[https://golang.org][golang.org]] pro více informací.

