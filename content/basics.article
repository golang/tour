Balíčky, proměnné a funkce.
Nauč se základní koncepty každého Go programu.

Autoři Go
https://golang.org

* Balíčky (Packages)

Každý Go program se skládá z balíčků.

Programy začínají běh v balíčku `main`.

Tento program používá balíčky importováním lokací `"fmt"` a `"math/rand"`.

Podle konvence, jméno balíčku je stejné jako poslední část importované lokace. Například, balíček `"math/rand"` se obsahuje soubory, které při použití začínají příkazem `package`rand`.

#appengine: *Poznámka:* prostředí ve kterém tyto jsou programy spouštěné je
#appengine: deterministické, takže pokaždé když spustíš tento příklad
#appengine: `rand.Intn` vrátí stejné číslo.
#appengine:
#appengine: (Abys viděl/a jiné číslo, zinicializuj generátor čísel pomocí `Seed`; podívej se na [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: Ve hřišti je čas konstantní, takže budeš muset použít něco jiného jako počáteční hodnotu k inicializaci.)

.play basics/packages.go

* Importy (Imports)

Tyto příkazy seskupují importované balíčky do ozávorkovaného, "rozděleného" příkazu.

Takto můžeš napsat několik import příkazů, jako např.:

	import "fmt"
	import "math"

Ale pro lepší styl je lepší použít rozdělený import příkaz.

.play basics/imports.go

* Exportované názvy

Název je v Go exportovaný (tj dostupný z jiného balíčku), pokud začíná velkým písmenem.
Například, `Pizza` je exportovaný název, stejně jako `Pi`, které je exportované z
balíčku `math`.

`pizza` a `pi` nezačínají velkým písmenem, takže nejsou exportované.

Když importujete balíček, můžete se odkázat pouze na jeho exportovaná jména.
Jakákoliv "neimportovaná" jména nebudou z jiného balíčku dostupná.

Spusť tento kód a všimni si chybové hlášky.

Aby si ho spravil/a, přejmenuj `math.pi` na `math.Pi` a zkus to znovu.

.play basics/exported-names.go

* Funkce

Funkce může mít žádný, nebo víc argumentů.

V tomto příkladu, `add` má dva parametry typu `int`.

Povšimni si, že typ je specifikovaný až _po_ názvu proměnné.

(Pro více o tom, proč typy vypadají tak, jak vypadají, se podívej na [[https://blog.golang.org/gos-declaration-syntax][článek o syntaxi Go deklarací]].)

.play basics/functions.go

* Funkce (pokračování)

Když dva nebo více po sobě specifikovaných parametrů sdílí jeden typ, je možné ho vynechat ze všech, až na poslední.

V tomto příkladu jsme zkrátili

	x int, y int

na

	x, y int

.play basics/functions-continued.go

* Více výsledků (Multiple results)

Funkce mohou vracet libovolné množství výsledků.

Funkce `swap` vrací dva stringy.

.play basics/multiple-results.go

* Pojmenované návratové hodnoty

Návratové hodnoty v Go mohou být pojmenované. Pokud jsou, je s nimi nakládáno jako s proměnnými definovanými na začátku funkce.

Tato jména by měla být použita pro dokumentaci významu návratových hodnot.

Příkaz `return` bez argumentů vrátí pojmenované návratové hodnoty a říká se tomu "holý" ("naked") return.

Holý příkaz `return` by měl být použitý jenom u krátkých funkcí, jako je to tady v příkladu. U delších funkcí by mohl zhoršit čitelnost.

.play basics/named-results.go

* Proměnné

Příkaz `var` deklaruje seznam proměnných; a stejně jako u seznamu argumentů funkce, typ je poslední.

Příkaz `var` může být na úrovni balíčku, nebo funkce. Obojí je ukázáno v tomto příkladu.

.play basics/variables.go

* Proměnné s inicializátory

Deklarace var může obsahovat inicializátory, jeden na proměnnou.

Pokud je nějaký inicializátor použitý je možné vynechat typ; proměnné převezmou typ z inicializátoru.

.play basics/variables-with-initializers.go

* Krátké deklarace proměnných

Uvnitř funkce je možné použít příkaz pro zkrácené přiřazení `:=` namísto deklarace `var` s implicitním typem.

Mimo funkce musí každý příkaz začínat klíčovým slovem (`var`, `func`, a tak dále) takže výraz `:=` není možný.

.play basics/short-variable-declarations.go

* Základní typy

Základní typy v Go jsou

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias pro uint8

	rune // alias pro int32
	     // reprezentuje Unicode code point

	float32 float64

	complex64 complex128

Tento příklad ukazuje proměnné různých typů,
a také že deklarace proměnných mohou být rozděleny do bloků,
podobně jako příkazy import.

Typy `int`, `uint`, a `uintptr` jsou obvykle na 32bitových systémech dlouhé 32 bitů a na 64bitových systémech dlouhé 64 bitů.
Když potřebuješ integer, tak bys měl použít `int` pokud nemáš speciální důvod pro použití konkrétně velikého, nebo bez-znaménkového typu.

.play basics/basic-types.go

* Defaultní (nulové) hodnoty

Proměnné deklarované bez explicitní počáteční hodnoty jsou nastavené na jejich
_nulovou_hodnotu_.

Nulová hodnota je:

- `0` pro číselné typy,
- `false` pro typy boolean, a
- `""` (prázdný řetězec) pro řetězce.

.play basics/zero.go

* Převody typů

Výraz `T(v)` převede (converts) hodnotu `v` na typ `T`.

Příklady číselných konverzí

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Nebo ještě zjednodušeno:

	i := 42
	f := float64(i)
	u := uint(f)

Na rozdíl od C, přiřazení mezi položkami různých typů v Go vyžaduje
explicitní konverzi.
Zkus odstranit konverzi `float64` nebo `uint` v tomto příkladu a uvidíš co se stane.

.play basics/type-conversions.go

* Odvození typu (Type inference)

Když deklarujete proměnnou bez uvedení explicitního typu (buď pomocí syntaxe `:=`, nebo syntaktického výrazu `var`=`), typ této proměnné je odvozený od hodnoty na pravé straně.

Když je na pravé straně deklarace typová, tak tato nová proměnná bude tohoto typu:

	var i int
	j := i // j je int

Ale pokud pravá strana obsahuje netypovou číselnou konstantu, nová proměnná může být `int`, `float64`, nebo `complex128` podle přesnosti této konstanty:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Zkus změnit počáteční hodnotu `v` v kódu příkladu a pozoruj jak to ovlivní její typ.

.play basics/type-inference.go

* Konstanty

Konstanty jsou deklarované jako proměnné, ale s klíčovým slovem `const`.

Konstanty mohou být znaky, řetězce, booleanské nebo číselné hodnoty.

Konstanty nemohou být deklarované s použitím syntaxe `:=`.

.play basics/constants.go

* Číselné konstanty

Číselné konstanty jsou _hodnoty_ s vysokou přesností.

Netypové konstanty přebírají potřebný typ podle kontextu použití.

Vyzkoušej si také vypsat `needInt(Big)`.

(Typ `int` může obsahovat maximálně 64-bitový integer, a někdy menší.)

.play basics/numeric-constants.go

* Gratulujeme!

Dokončil/a jsi tuto lekci!

Můžeš jít zpět na seznam [[/list][modulů]] kde najdeš co se naučit dalšího, nebo pokračovat na [[javascript:click('.next-page')][další lekci]].
