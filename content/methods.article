Metody a interface
Tato lekce pokrývá metody a interface, konstrukce, které definují objekty a jejich chování.

Autoři Go
https://golang.org

* Metody

Go nemá třídy.
Přesto ale, je možné na typech definovat metody.

Metoda je funkce se speciálním argumentem _příjemce_ (receiver).

Příjemci se objevují ve svém vlasním seznamu argumentů mezi klíčovým slovem`func` a
názvem metody.

V tomto příkladu, metoda `Abs` má příjemce typu `Vertex` nazvaného `v`.

.play methods/methods.go

* Metody jsou funkce

Pamatuj: metoda je jenom funkce s argumentem příjemce.

Tady je `Abs` napsaná jako obyčejná funkce beze změny funkce.

.play methods/methods-funcs.go

* Metody (pokračování)

Metodu můžeš nadeklarovat i na jiných typech než struktury.

V tomto příkladu vidíme číselný typ `MyFloat` s metodou `Abs`.

Metodu můžeš deklarovat jenom s příjemcem jehož typ je definovaný ve stejném
balíčku jako tato metoda.
Nemůžš delrarovat metodu s příjemcem jehož typ je definovaný v jiném balíčku
(týká se to i zabudovaných typů jako je `int`).

.play methods/methods-continued.go

* Ukazatele na příjemce

Můžeš deklarovat metody s ukazateli na příjemce.

To znamená že typ příjemce se doslova zapisuje jako `*T` pro nějaký typ `T`.
(Také, samotný typ `T` nemůže být ukazatel jako třeba `*int`.)

Například metoda `Scale` je tu definována na `*Vertex`.

Metody s ukazateli na příjemce mohou měnit hodnoty na které příjemce
ukazuje (jako se tady děje se `Scale`).
Protože metody potřebují často měnit své příjemce, jsou ukazatele na příjemce běžnější
než hodnotoví příjemci.

Vyzkoušej odstranit `*` z deklarace funkce `Scale` na řádku 16
a sleduj jak se změní chování přogramu.

S hodnotovým příjemcem, metoda `Scale`operuje na koii původní hodnoty
`Vertex`.
(Tohle je stejné chování jako u kteréhokoliv jiného parametru funkce.)
Metoda `Scale` musím mít ukazatel na pointer aby mohla měnit hodnotu `Vertex`
deklarovanou ve funkci `main`.

.play methods/methods-pointers.go

* Ukazatele a funkce

Tady vidíme metody `Abs` a `Scale` přepsané jako funkce.

Znovu, zikus odstranit `*` z řádku 16.
Vidíš proč se změnilo chování?
Co ještě bylo potřeba změnit aby se dal příklad přeložit?

(Pokud si nejsi jistý/á, pokračuj na další stránku.)

.play methods/methods-pointers-explained.go

* Metody a nepřímost ukazatelů

Porovnáním předchozích dvoj programů si můžeš všimnout,
že funkce s ukazatelem v parametru musejí být volané s ukazatelem:

	var v Vertex
	ScaleFunc(v, 5)  // Chyba v kompilaci!
	ScaleFunc(&v, 5) // OK

zatímco metody s ukazatelem na příjemce akceptují obojí, jak hodnotu tak i ukazatel
jako příjemce, když jsou volané:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

V příkazu `v.Scale(5)`, i přesto že `v` je hodnota a ne ukazatel,
je metoda automaticky volaná s ukazatelem na příjemce.
To je, že pro pohodlí, Go interpretuje příkaz `v.Scale(5)` jako
`(&v).Scale(5)` protože metoda `Scale` má ukazatel na příjemce.

.play methods/indirection.go

* Metody a nepřímost ukazatelů (2)

Podobná věc se děje v obráceném směru.

Funkce které mají hodnotový argument musejí přijímat hodnotu daného typu:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Chyba kompilace!

zatímce když jsou volané metody s hodnotovými příjemci přijímají jako příjemce
buď hodnotu nebo ukazatel:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

V tomto případě volání metody `p.Abs()` je interpretováno jako `(*p).Abs()`.

.play methods/indirection-values.go

* Výběr hodnotového nebo ukazatelového příjemce

Existují dva důvody proč použít ukazatele na příjemce.

První je že metoda může měnit hodnotu na kterou příjemce ukazuje.

Druhý je, aby se zabránílo kopírování hodnoty při každém volání metody.
Pokud je příjemce například velká struktura, tak to může být efektivnější.

V tomto příkladu obě `Scale` i `Abs` jsou s příjemcem typu `*Vertex`,
přestože metoda `Abs` nepotřebuje modifikovat svého příjemce.

Obecně řečeno, všechny metody na daném typu by měly být buď hodnotového, nebo ukazatelového
příjemce, ale ne kombinaci obou.
(uvidíme proč za dalších pár stránek.)

.play methods/methods-with-pointer-receivers.go

* Interface (rozhraní)

Typ _typ_interface_ je definovaný jako sada signatur metod.

Hodnota typu interface může obsahovat jakoukoliv hodnotu, která implementuje tuto sadu metod.

*Poznámka:* Na řádku 22 v kódu příkladu je chyba.
`Vertex` (hodnotový typ) neimplementuje `Abser` protože
metoda `Abs` je definována jen na typu `*Vertex` (ukazatelový typ).

.play methods/interfaces.go

* Interface jsou implementovány implicitně

Typ implementuje interface, tím že implementuje jeho metody.
Neexistuje žádná explicitní deklarace záměru, nebo klíčové slovo "implements".

Implicitní interface dovolují oddělit (decouple) definici interface od jeho
implementace, která se tak může objevit v jakémkoliv balíčku bez nějaké předpřípravy.

.play methods/interfaces-are-satisfied-implicitly.go

* Hodnoty Interfaců

Pod povrchem je o interface možné přemýšlet jako o dvojici (tuple) hodnoty a
konkrétního typu:

	(hodnota, typ)

Hodnota interface obsahuje hodnotu specifického základního konkrétního typu.

Volání metody na hodnotě interface provede metodu se stejným názvem na
základním typu interface.

.play methods/interface-values.go

* Hodnoty interfaců se základním typem nil

Pokud je konkrétní typ v samotném interface nil,
metoda bude zavolaná na nil příjemci.

V některých jazycích by to vedlo k vyvolání null pointer exception,
ale v Go je běžné psát metody které pracují správně i když jsou zavolané
s nil příjemcem (jako v případě metody `M` v tomto příkladu.)

Všimni si, že hodnota interface která obsahuje konkrétní hodnotu nil sama není nil.

.play methods/interface-values-with-nil.go

* Nil hodnoty interface

Hodnota nil v interface nedrží ani hodnotu, ani konkrétní typ.

Voláním metody na nil interface vyvolá chybu run-time protože není
žádný typ v dvojici tuple interface, který by naznačil jakou _konkrétní_ metodu zavolat.

.play methods/nil-interface-values.go

* Prázdný interface

Typ interface který nespecifikuje žádné metody je známý jako _prázdný_interface_ (empty interface):

	interface{}

Prázdný inteface může držet hodnoty jakéhokoliv typu.
(Každý typ implementuje alespoň žádné metody.)

Prádné interface jsou používané v kódu který ošetřuje hodnoty nezných typů.
Například `fmt.Print` přijímá libovolný počet argumentů typu `interface{}`.

.play methods/empty-interface.go

* Vynucení typu (Type assertions)

_Vynucení_typu_ poskytuje přístup ke konkrétnímu základnímu typu interface.

	t := i.(T)

Takový příklad vynutí aby hodnota interface `i` držela konkrétní typ `T`
a přiřadila  základní hodnotu `T` do proměnné `t`.

POkud `i` nedrží typ `T`, tento příkaz spustí paniku (panic).

Pro _test_ jestli hodnota interface drží specifický typ,
vynucení typu může vrátit dvě hodnoty: základní hodnotu a
booleanskou hodnotu která signalizuje jestli se vynucení povedlo.

	t, ok := i.(T)

Pokud `i` drží nějaký `T`, potom bude `t` základní hodnota a `ok` bude true.

Pokud ne, `ok` bude false a `t` nulová hodnota typu `T`
a nevyvolá se žádná panika.

Povšimni si podobnosti mezí touto syntaxí a tím jak se čte z mapy.

.play methods/type-assertions.go

* Typové přepínače (Type switches)

_Typový_přepínač_ je konstrukt který dovoluje sérii několika typových vynucení.

Typový přepíjač je jako běžný příkaz switch, ale jednotlivé případy u typového
přepínače specifikují typy (ne hodnoty), a tyto hodnoty jsou porovnávané s
typem hodnoty drženou hodnotou daného interface.

	switch v := i.(type) {
	case T:
		// tady má v typ T
	case S:
		// tady v má typ S
	default:
		// žádná shoda;  tady má v stejný typ jako i
	}

Deklarace má v typovém přepínači stejný syntax jako typové vynucení `i.(T)`,
ale konkrétní typ `T` je nahrazený klíčovým slovem `type`.

Tento příkaz switch testuje jestli hodnota interface `i`
obsahuje nějakou hodnotu typu `T` nebo `S`.
V každém z případů pro  `T` a `S`, bude proměnná `v` typu 
`T` nebo `S` v tomto pořadí a bude mít hodnotu kterou má `i`.
V defaultním případě (pokud se nenajde shoda), proměnná `v` má
stejný interface type a hodnotu jako `i`.

.play methods/type-switches.go

* Stringery (Stringers)

Jeden z nejvíce všudypřítomných rozhraní je [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] definovaný v balíčku [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

`Stringer` je typ, který se sám může popsat jako řetězec. Balíček `fmt`
(a řada dalších) hledá toto rozhraní během výpisů hodnot.

.play methods/stringer.go

* Cvičení: Stringery

Změň typ `IPAddr` aby implementoval `fmt.Stringer` pro výpis adres jako
tečkami oddělenou čtveřici čísel.

Například, `IPAddr{1,`2,`3,`4}` by se mělo vypsat jako `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Chyby

Go programy vyjadřují chybové stavy jako hodnoty typu `error`.

Typ `error` je zabudovaný interface podobně jako `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Podobně jako u `fmt.Stringer`, balíček `fmt` hledá interface `error` když
vypisuje hodnoty.)

Funkce často vrací hodnotu `error` a volající kód by měl ošetřit chyby pomocí testu
jestli se error rovná `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("nemohu převést číslo: %v\n", err)
		return
	}
	fmt.Println("Převedený integer:", i)

Hodnota nil v `error` oznamuje úspěch; ne nilová hodnota `error` označuje chybu.

.play methods/errors.go

* Cvičení: Chyby Errors

Zkopíruj svoji funkci `Sqrt` z [[/flowcontrol/8][dřívější cvičení]] a změň ji aby vracela hodnotu `error`.

`Sqrt` by měla vracet ne=nil chybovou hodotu pokud dostane záporné číslo, protože nepodporuje komplexní čísla.

Vytvoř nový typ<

	type ErrNegativeSqrt float64

a udělej z něho `error` pomocí přidání metody

	func (e ErrNegativeSqrt) Errors() string

se kterou vrátí volání `ErrNegativeSqrt(-2).Error()` chybu `"nemohu provést `Sqrt` na záporném `čísle:`-2"`.

*Poznámka:* Volání `fmt.Sprint(e)` uvnitř metody `Error` zacyklí program v nekonečné smyčce. Tomu se můžeš vyhnout pokud nejdřív zkonvertuješ `e` takto: `fmt.Sprint(float64(e))`. Proč?

Změň svoji funkci `Sqrt` aby vracela hodnotu `ErrNegativeSqrt` pokud je jí předané záporné číslo.

.play methods/exercise-errors.go

* Čtenáři (Readers)

Balíček `io` specifikuje interface `io.Reader`,
který reprezentuje operaci čtení ze streamu dat.

Standardní knihovna Go obsahuje [[https://golang.org/search?q=Read#Global][množství implementací]] tohoto interface, Včetně souborů, síťových spojení, kompresorů, šifrovačů, a jiných.

Rozhraní `io.Reader` má metodu `Read`:

	func (T) Read(b []byte) (n int, err error)

Metoda `Read` načítá data do daného řezu bytů a vrací počet načtených
bytů a hodnotu chyby. Když stream skončí, tak vrací chybu `io.EOF`.

Tento příklad vytváří
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
a konzumuje jeho výstup najednou po 8mi bytech.

.play methods/reader.go

* Cvičení: Čtenáři (Readers)

Naimplementuj typ `Reader` který vytváří nekonečný stream ASCII znaků
`'A'`.

.play methods/exercise-reader.go

* Cvičení: rot13Reader

Běžný vzor je obalit původní [[https://golang.org/pkg/io/#Reader][io.Reader]] novým `io.Reader`-em který ten původní stream nějak mění.

Například, funkce[[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] přijíká `io.Reader` (stream kompresovaných dat) a vrací `*gzip.Reader` který také implementuje `io.Reader` (stream dekompresovaných dat).

Naimplementuj `rot13Reader` který implementuje `io.Reader` a čte z nějakého `io.Reader`-u, měnícím původní stream aplikujícím substituční šifru [[https://en.wikipedia.org/wiki/ROT13][rot13]] na všechny alfanumerické.

Typ `rot13Reader` je pro tebe připravený.
Udělej z něho `io.Reader` naimplementováním jeho metody `Read`.

.play methods/exercise-rot-reader.go

* Obrázky

[[https://golang.org/pkg/image/#Image][Balíček image]] Definuje interface `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Poznámka*: Metoda `Rectangle` která vrací jako hodnotu metodu `Bounds` je vlastně funkce
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], protože je
uvnitř balíčku `image`.

(Podívej se na [[https://golang.org/pkg/image/#Image][dokumentaci]] pro všechny detaily.)

Typy `color.Color` a `color.Model` jsou také interface, ale budeme to ignorovat a použijeme předdefinoané implementace `color.RGBA` a `color.RGBAModel`. Tyto interface a typy jsou specifiiované v [[https://golang.org/pkg/image/color/][balíčku image/color]]

.play methods/images.go

* Cvičení: Obrázky

Vzpomínáš si na generátor obrázků který si napsal/a dříve? Pojďme napsat další, ale tentokrát bude vracet implementaci `image.Image` místo řezu dat.

Definuj svůj vlastní typ `Image` a implementuj [[https://golang.org/pkg/image/#Image][potřebné metody]], a zavolej `pic.ShowImage`.

`Bounds` by měl vracet `image.Rectangle`, jako třeba `image.Rect(0,`0,`w,`h)`.

`ColorModel` by měl vracet `color.RGBAModel`.

`At` by měl vracet barvu; hodnota `v` z posledního generáturu obrázků koresponduje s `color.RGBA{v,`v,`255,`255}` v tomto.

.play methods/exercise-images.go

* Gratulujeme!

Dokončil/a jsi tuto lekci!

Můžeš jít zpět na seznam [[/list][modulů]] kde najdeš co se naučit dalšího, nebo pokračovat na [[javascript:click('.next-page')][další lekci]].