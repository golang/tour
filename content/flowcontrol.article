Příkazy pro řízení běhu: for, if, else, switch a defer
Nauč se jak řídit běh své aplikace s podmínkami, cykly, přepínači switch a odloženími defers.

Autoři Go
https://golang.org

* For

Go má jen jeden konstrukt pro cykly, cyklus `for`.

Základní `for` cyklus má tři komponenty oddělené středníky:

- počáteční příkaz: vykonaný před první iterací
- výraz podmínky: vyhodnocený před každou iterací
- následující příkaz: provedený na konci každé iterace

Počátečhí příkaz bude často krátká deklarace proměnné, a proměnné tady
deklararované jsou dostupné jenom v rozsahu  `for`
příkazu.

Cyklus skončí vyhodnocování jakmile se jeho booleanská podmínka vyhodnotí jako `false`.

_Poznámka_: Na rozdíl od jazyků jako C, Java, nebo JavaScript tadz nejsou žádné závorky
obklopující tři komponenty příkazu `for` a složené závorky `{`}` jsou
vždy povinné.

.play flowcontrol/for.go

* For (pokračování)

Počáteční a následující příkaz jsou nepovinné.

.play flowcontrol/for-continued.go

* For je "while" jazyka Go

V tomto bodu můžeme vypustit středníky: C-čkový `while` se v Go píše jako `for`.

.play flowcontrol/for-is-gos-while.go

* Navždy

Pokud vypustíš podmínku cyklu bude se provádět donekonečna, takže nekonečný cyklus má kompaktní vyjádření.

.play flowcontrol/forever.go

* If

V jazyku Go jsou příkazy `if` jako jeho `for` cykly; výrazy nemusí být 
obklopené závorkami `(`)` ale složené závorky `{`}` jsou povinné.

.play flowcontrol/if.go

* If se zkráceným příkazem

Jako u `for`, příkaz `if` můžé začínat s krátkým příkazem, které se provede před podmínkou.

Proměnné deklarované příkazem jsou dostupné jenom do konce příkazu `if`.

(Zkus použít `v` v posledním příkazu `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If a else

Proměnné deklarované uvnitř zkráceného příkazu `if` jsou také dostupné uvnitř nějakého z jeho 
`else` bloků.

(Obojí volání funkce `pow` jsou provedeny a vrátí hodnoty předtím než v `main` začne volání
funkce `fmt.Println`.)

.play flowcontrol/if-and-else.go

* Cvičení: Cykly a funkce

Jako způsob k pohrání si s funkcemi a cykly pojďme naimplementovat funkci pro odmocninu: je dáno číslo x a my chceme najít číslo z pro které z² je co nejblíže x.

Počítače obvykle počítají odmocninu x s použitím cyklu.
Začínáme s nějakým odhadem z, můžeme z upravit podle toho jak blízko z² je k x,
což nám poskytne lepší odhad:

	z -= (z*z - x) / (2*z)

Opakováním těchtu úprav se náš odhad zlepšuje a zlepšuje
dokud nedostaneme hodnotu která je tak blízko, jak jen může být.

Naimplementuj to v poskytnutné funkci `func`Sqrt`.
Rozumný startovací odhad pro z je 1, bez ohlednu na vstup.
Pro začátek, zopakuj výpočet 10 krát a vytiskni každé z které jsi vypočítal/a.
Vykoušej jak blízko se dostaneš k odpovědi s různými hodnotami x (1, 2, 3, ...)
a jak rychle se odhad zlepšuje.

Nápověda: Pro deklarování a inicializaci hodnoty s plovoucí řádovou čárkou (floating point),
použij syntaxi floating pointu, nebo použij konverzi:

	z := 1.0
	z := float64(1)

Dále, změň podmínku v cyklu tak, aby se zastavil jakmile se hodnota přestane
měnit (nebo jestli se změní jen velmi málo).
Zjisti jestli je to po více, nebo méně než 10 iteracích.
Vyzkoušej další počáteční odhady pro z, jako třeba x, nebo x/2.
Jak blízké jsem výsledky tvé funkce k funkci [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] ze standardní knihovny?

(Poznámka: Pokud tě zajímají detaily algorithmu, výraz z² − x nahoře
je jak je daleko z² od toho co by mělo být (x), a dělení 2z je derivací
z², pro zjištění jak moc upravit (z) pomocí toho jak rychle se z² mění.
Tento obecný příštup se jmenuje [[https://en.wikipedia.org/wiki/Newton%27s_method][Newtonova metoda]].
Funguje dobře pro mnoho funkcí, ale zvlášť dobře pro odmocninu.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Příkaz `switch` je kratší verzí zápisu sekvence příkazů `if`-`else`.
Spustí to první případ (case) jehož hodnota se rovná výrazu podmínky.

Příkaz switch v Go je jako ten v C, C++, Java, JavaScript, a PHP,
kromě toho že Go spouští jenom vybraný případ, ne všechny případy které následují.
To znamená že příkaz `break` který je potřeba na konci každého case v těchto
jazycích je dodán v Go automaticky.
Další důležitý rozdíl je, že switch případy v Go nemusí být
konstanty, a že tyto hodnoty nemusejí být celočíselné (integer).

.play flowcontrol/switch.go

* Pořadí vyhodnocování u příkazu Switch

Switch případy jsou vyhodnocované odshora dolů, se zastavením když výraz case uspěje.

(Například,

	switch i {
	case 0:
	case f():
	}

nezavolá `f` když bude `i==0`.)

#appengine: *Poznámka:* Čas uvnitř Go hřiště začíná vždycky ve
#appengine: 2009-11-10 23:00:00 UTC, zjištění významu této hodnoty je ponecháno
#appengine: jako cvičení pro čtenáře.

.play flowcontrol/switch-evaluation-order.go

* Switch bez podmínek

Příkaz switch bez podmínkz je stejný jako `switch`true`.

Taková konstrukce může být čistým způsobem jak zapsat dlouhé řetězce if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer (odložení)

Příkaz defer odkládá provedení funkce dokud funkce ve které je použit neukončí.

Argumenty volání odložené funkce jsou vyhodnocené okamžitě, ale volání funkce 
se neprovede dokud obklopující funkce neskončí.

.play flowcontrol/defer.go

* Ukládání odložení (defers) na zásobník

Odložená volání funkce jsou vložena do zásobníku. Když se funkce ukončí, její
odložená volání jsou provedena v obráceném pořadí (LIFO) - poslední uložený je první provedený.

Pro zjištění více o příkazech defer si přečti tento
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Gratulujeme!

Dokončil/a jsi tuto lekci!

Můžeš jít zpět na seznam [[/list][modulů]] kde najdeš co se naučit dalšího, nebo pokračovat na [[javascript:click('.next-page')][další lekci]].
