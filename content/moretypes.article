Víc typů: struktury, slice, a mapy.
Nauč se jak definovat typy založené na existujících: tato lekce pokrývá struktury, pole, výřezy (slice) a mapy.

Autoři Go
https://golang.org

* Ukazatele

Go má ukazatele (pointers).
Ukazatel drží paměťovou adresu nějaké hodnoty.

Typ `*T` je ukauzatel na `T` hodnotu. Jeho nulová hodnota (zero value) je `nil`.

	var p *int

Operátor `&` generuje pointer na svůj operand.

	i := 42
	p = &i

Operátor `*` ukazuje hodnotu ležící za pointerem.

	fmt.Println(*p) // načte i skrze pointer p
	*p = 21         // nastaví i skrze pointer p

Tohle je známé jako "dereferencování", nebo nepřímý přístup ("indirecting").

Na rozdíl od C, Go nemá žádnou pointerovou aritmetiku.

.play moretypes/pointers.go

* Struktury (Structs)

Struktura `struct` je kolekcí položek.

.play moretypes/structs.go

* Položky struktur

Položky struktur jsou přistupovámy s použitím tečky.

.play moretypes/struct-fields.go

* Ukazatele na struktury

Položky struktur mohou být zpřístupněny skrze ukazatel na strukturu.

Když máme ukazatel `p` na stukturu, pro přístup k položce `X` ze struktury  můžeme
napsat `(*p).X`.
Nicméně takový zápis je těžkopádný, takže nám jazyk dovoluje místo toho
napsat jenom `p.X`, bez explicitní dereference.

.play moretypes/struct-pointers.go

* Strukturové literály (literals)

Strukturové literály označují nově alokované struktury pomocí uvedení hodnot jejích položek.

Můžeš uvést jenom část položek s použitím `Name:` syntaxe. (A pořadí pojmenovaných položek je irelevantní.)

Speciální prefix `&` vrací ukazatel na hodnotu struktury.

.play moretypes/struct-literals.go


* Pole

Typ `[n]T` je pole `n` hodnot typu `T`.

Výraz

	var a [10]int

deklaruje proměnnou `a` jako pole deseti celých čísel.

Délka pole je součástí jeho typu, takže velist pole se nemůže měnit.
To se zdá limitujcí, ale neboj se;
Go poskytuje vhodný způsob pro práci s poli.

.play moretypes/array.go


* Výřezy (Slices)

Pole má pevnou velikost.
na druhou stranu velikost slice je dynamický
flexibilní pohled do elementů pole.
V praxi, výřezy jsou mnohem běžnější než pole.

Typ `[]T` je výřez s elementy typu `T`.

Výřez se vytváří specifikací dvou indexů, spodní a
horní hranicí, oddělených dvojtečkou:

	a[spodní : horní]

To vybere polo-otevřený rozsah který obsahuje první
element, ale nezahrnuje poslední.

Následující výraz vytvoří výřez který obsahuje 
elementy `a` od 1 do 3:

	a[1:4]

.play moretypes/slices.go


* Výřezy jsou jako reference na pole

Výřez neukládá žádná data,
ale jen popisuje sekci pole které je pod ním.

Změnou elementů výřezu modifikuje korespondující elementy
v poli které je pod ním.

Další výrezy které sdílejí stejné základní pole také uvidí tyto změny.

.play moretypes/slices-pointers.go


* Výřezové literály

Výřezový literál je jako literál pole, ale bez uvedení délky.

Tohle je literál pole:

	[3]bool{true, true, false}

A tohle vytvoří stejné pole jako nahoře,
a pak vytvoří výřez který se na pole odkazuje:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Defaultní výřezy

Když vyřezáváte, můžete vynechat horní nebo spodní indexy aby se použily místo toho jejich defaultní hodnoty.

Defaultní hodnota pro spodní index je nula a pro horní index délka výřezu.

Pro pole

	var a [10]int

jsou tyto výrazy výřezů ekvivalentní:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Délka a kapacita výřezu

Výřez má zároveň _délku_ a _kapacitu_.

Délka výřezu je počet elementů které obsahuje.

Kapacita výřezu je počet elementů v základním poli,
počítaná od prvního elementu výřezu.

Délka a kapacita výřezu `s` může být získána s použitím výrazů
`len(s)` a `cap(s)`.

Můžeš zvětšit délku výřezu pomocí znovu-vyříznutí,
pokud ten má dostatečnou kapacitu.
Vyzkoušej změnit jednu z výřezových operací v ukázkovém programu a zvětšit ho
za jeho kapacitu a zjisti co se stane.

.play moretypes/slice-len-cap.go


* Výřezy Nil

Nulová hodnota výřezu je `nil`.

Výřez nil má délku a kapacitu 0
a nemá pod sebou žádné pole.

.play moretypes/nil-slices.go


* Vytváření výřezu pomocí make

Výřezy mohou být vytvořené s zabudovanou funkcí `make`;
a takhle se vytvářejí pole s dynamickou velikostí.

Funkce `make` alokuje vynulované polé
a vrátí výřez které se na pole odkazuje:

	a := make([]int, 5)  // len(a)=5

Pro určení kapacity, předej funkci `make` třetí argument:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Výřezy výřezů

Výřezy mohou obsahovat libovolné typy, včetně dalších výřezů.

.play moretypes/slices-of-slice.go


* Přidávání do výřezu

Je běžné do výřezu přidávat nový element a tak Go nabízí zabudovanou
funkci `append`. Dokumentace balíčku built-in 
[[https://golang.org/pkg/builtin/#append][documentation]] `append` popisuje.

	func append(s []T, vs ...T) []T

První parametr `append`, `s` je výřez typu `T` a zbytek jsou `T` hodnoty
pro přidání do výřezu.

Výsledná hodnota `append` je výřez obsahující všechny elementy
původního výřezu plus hodnoty které jsi poskytl/a.

Pokud je základní pole `s` moc malé aby se do něho vešly všechny dodané hodnoty
bude alokované větší pole. Vracený výřez bude odkazovat na nově vytvořené pole.

(Pro zjištění více o výřezech, přečti si článek [[https://blog.golang.org/go-slices-usage-and-internals][Výřezy: použití a detaily o implementaci]].)

.play moretypes/append.go


* Rozsah (range)

Forma `range` cyklu `for` prochází přes výřez nebo mapu.

Když procházíte výřez pomocí range, pro každou iteraci jsou vráceny dvě hodnoty.
První je index a druhá je kopie elementu na daném indexu.

.play moretypes/range.go

* Rozsah (range) - pokračování

Můžeš přeskočit index nebo hodnotu pomocí přiřazení do `_`.

Pokud potřebuješ jenom index, vypusti úplně `, hodnota`.

.play moretypes/range-continued.go

* Cvičení: Výřezy

Implementuj `Pic`. Mělo by to vrátit výřez délky `dy`, jehož každý element je výřez `dx` 8-bitových neznaménkových celých čísel. Když zapneš program, zobrazí to tvůj obrázek, interpretující celá čísla jako hodnoty odstíny šedi (no dobře modři).

Volba obrázku je na tobě. Zajímavé funkce jsou `(x+y)/2`, `x*y`, a `x^y`.

(Budeš potřebovat použít cyklus pro alokování každého `[]uint8` uvnitř `[][]uint8`.)

(Použij `uint8(intValue)` pro převod mezi typy.)

.play moretypes/exercise-slices.go

* Mapy (maps)

A map maps keys to values.

Nulová hodnota mapy je `nil`.
`nil` mapa nemá žádné klíče, ani nemohou být žádné klíče přidány.

Funkce `make` vrací returns mapu daného typu,
inicializovanou a připravenou k použití.

.play moretypes/maps.go

* Mapové literály

Mapové literály jsou jako strukturové literély, ale klíče jsou povinné.

.play moretypes/map-literals.go

* Mapové literály - pokračování

Pokud je typ horní úrovně jen název typu, můžeš ho vynechat z elementů literálu.

.play moretypes/map-literals-continued.go

* Změny v mapách (mutating maps)

Vložení nebo změna elementu v mapě `m`:

	m[key] = elem

Získání elementu:

	elem = m[key]

Smazání elementu:

	delete(m, key)

Test jestli klíč existuje s pomocí přiřazení dvou hodnot:

	elem, ok = m[key]

Pokud je `key` v `m`, `ok` je `true`. Pokud není, `ok` je `false`.

Pokud není `key` v mapě, potom `elem` je nulová hodnota elementového typu mapy.

_Poznámka_: Pokud `elem` nebo `ok` ještě nebyly deklarované, můžeš použít formu krátké deklarace:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Cvičení: Mapy

Naimplementuj `WordCount`.  Mělo by vracet mapu počtů každého “slova” v řezězci `s`. Funkce `wc.Test` spouští sadu testů proti poskytnuté funkci a vypisuje úspěch něbo selhání.

Možná se ti bude hodit [[https://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Funkční hodnoty

Funkce jsou také hodnoty. Můžeš je různě předávat stejně jako jiné hodnoty.

Funkční hodnoty mohou být použité jako argumenty funkcí a návratové hodnoty.

.play moretypes/function-values.go

* Uzávěry funkcí

Funkce v Go mohou být uzávěrami. Uzávěra je funkční hodnota, která odkazuje na proměnné mimo své tělo. Funkce může přistupovat k a přiřazovat referenované proměnné; V tomto smyslu je funkce "svázána" s proměnnými.

Například, funkce `adder` vrací uzávěru. Každá uzávěra je navázána ke své vlastí proměnné `sum`.

.play moretypes/function-closures.go

* Cvičení: Fibonacciho uzávěra

Pojďme se trochu pobavit s funkcemi.

Naimplementuj funkci `fibonacci'` která vrací funkci (uzávěru) která
vrací po sobě jdoucí [[https://en.wikipedia.org/wiki/Fibonacci_number][fibonnacciho čísla]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Gratulujeme!

Dokončil/a jsi tuto lekci!

Můžeš jít zpět na seznam [[/list][modulů]] kde najdeš co se naučit dalšího, nebo pokračovat na [[javascript:click('.next-page')][další lekci]].